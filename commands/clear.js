const { EmbedBuilder, PermissionFlagsBits, AttachmentBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { LOG_CHANNELS } = require('../config.js');

module.exports = {
  name: 'clear',
  description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.',
  async prefixExecute(message, args) {
    if (!message.member.permissions.has(PermissionFlagsBits.ManageMessages)) {
      return message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const quantity = parseInt(args[args.length - 1]);
    if (isNaN(quantity) || quantity < 1 || quantity > 100) {
      return message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 1 –¥–æ 100.');
    }

    const user = message.mentions.users.first();

    try {
      if (user) {
        const messages = await message.channel.messages.fetch({ limit: 100 });
        const userMessages = messages.filter(msg => msg.author.id === user.id).first(quantity);

        if (!userMessages || userMessages.length === 0) {
          return message.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }

        await message.channel.bulkDelete(userMessages, true);

        const embed = new EmbedBuilder()
          .setTitle('–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
          .setColor('#000000')
          .addFields(
            { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', value: `${user.tag} \`${user.id}\``, inline: false },
            { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:', value: `${message.author.tag} \`${message.author.id}\``, inline: false },
            { name: '–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', value: `${userMessages.length}`, inline: false }
          )
          .setTimestamp();

        await message.channel.send({ embeds: [embed] });

      } else {
        const messages = await message.channel.messages.fetch({ limit: quantity + 1 }); // +1 pra incluir o comando
        const filtered = messages.filter(msg => !msg.pinned && msg.id !== message.id);

        if (filtered.size === 0) {
          return message.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
        }


        const logLines = filtered.map(msg => {
          const date = msg.createdAt.toLocaleString('ru-RU');
          return `[${date}] ${msg.author.tag} (${msg.author.id}): ${msg.content || '[–í–ª–æ–∂–µ–Ω–∏–µ/–ø—É—Å—Ç–æ]'}`;
        }).join('\n');

        const logPath = path.join(__dirname, '..', 'logs', `deleted-${Date.now()}.txt`);
        fs.mkdirSync(path.dirname(logPath), { recursive: true });
        fs.writeFileSync(logPath, logLines);

        await message.channel.bulkDelete(filtered, true);

        const embed = new EmbedBuilder()
          .setTitle('–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
          .setColor('#000000')
          .addFields(
            { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:', value: `${message.author.tag} \`${message.author.id}\``, inline: false },
            { name: '–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', value: `${filtered.size}`, inline: false }
          )
          .setTimestamp();

        // Enviar no canal atual
        await message.channel.send({
          embeds: [embed]
        });

        // Enviar arquivo de log no canal de logs
        const logChannel = message.guild.channels.cache.get(LOG_CHANNELS.messages);
        if (logChannel) {
          await logChannel.send({
            embeds: [{
              title: 'üìú –ñ—É—Ä–Ω–∞–ª —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
              description: `**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** ${message.author.tag} \`${message.author.id}\`\n**–ö–∞–Ω–∞–ª:** ${message.channel}\n**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** ${filtered.size}`,
              color: 0xFF0000,
              timestamp: new Date()
            }],
            files: [new AttachmentBuilder(logPath)]
          });
        }


        setTimeout(() => {
          fs.unlink(logPath, err => {
            if (err) console.error('Erro ao deletar o arquivo:', err);
          });
        }, 60_000);
      }

    } catch (err) {
      console.error(err);
      return message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  }
};
