const { EmbedBuilder, PermissionFlagsBits, AttachmentBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { LOG_CHANNELS } = require('../config.js');

module.exports = {
  name: 'clear',
  description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.',
  async prefixExecute(message, args) {
    if (!message.member.permissions.has(PermissionFlagsBits.ManageMessages)) {
      return message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const quantity = parseInt(args[args.length - 1]);
    if (isNaN(quantity) || quantity < 1 || quantity > 1000) {
      return message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 1 –¥–æ 1000.');
    }

    try {
      let deletedMessages = [];
      let remaining = quantity;
      let lastMessageId = null;

      while (remaining > 0) {
        const fetchAmount = Math.min(remaining, 100);
        const options = { limit: fetchAmount };
        if (lastMessageId) options.before = lastMessageId;

        const fetched = await message.channel.messages.fetch(options);
        const twoWeeksAgo = Date.now() - 14 * 24 * 60 * 60 * 1000;

        const filtered = fetched
          .filter(msg => !msg.pinned && msg.id !== message.id && msg.createdTimestamp > twoWeeksAgo);

        if (filtered.size === 0) break;

        const toDelete = Array.from(filtered.values());
        lastMessageId = toDelete[toDelete.length - 1]?.id;

        await message.channel.bulkDelete(toDelete, true);
        deletedMessages.push(...toDelete);
        remaining -= toDelete.length;


        await new Promise(res => setTimeout(res, 1000));
      }

      if (deletedMessages.length === 0) {
        return message.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      }

      const logLines = deletedMessages.map(msg => {
        const date = msg.createdAt.toLocaleString('ru-RU');
        return `[${date}] ${msg.author.tag} (${msg.author.id}): ${msg.content || '[–í–ª–æ–∂–µ–Ω–∏–µ/–ø—É—Å—Ç–æ]'}`;
      }).join('\n');

      const logPath = path.join(__dirname, '..', 'logs', `deleted-${Date.now()}.txt`);
      fs.mkdirSync(path.dirname(logPath), { recursive: true });
      fs.writeFileSync(logPath, logLines);

      const embed = new EmbedBuilder()
        .setTitle('–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
        .setColor('#000000')
        .addFields(
          { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:', value: `${message.author.tag} \`${message.author.id}\``, inline: false },
          { name: '–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', value: `${deletedMessages.length}`, inline: false }
        )
        .setTimestamp();

      await message.channel.send({ embeds: [embed] });

      const logChannel = message.guild.channels.cache.get(LOG_CHANNELS.messages);
      if (logChannel) {
        await logChannel.send({
          embeds: [{
            title: 'üìú –ñ—É—Ä–Ω–∞–ª —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
            description: `**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** ${message.author.tag} \`${message.author.id}\`\n**–ö–∞–Ω–∞–ª:** ${message.channel}\n**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** ${deletedMessages.length}`,
            color: 0xFF0000,
            timestamp: new Date()
          }],
          files: [new AttachmentBuilder(logPath)]
        });
      }

      setTimeout(() => {
        fs.unlink(logPath, err => {
          if (err) console.error('Erro ao deletar o arquivo:', err);
        });
      }, 60_000);

    } catch (err) {
      console.error(err);
      return message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  }
};