
const { AuditLogEvent, PermissionsBitField } = require('discord.js');

const thresholds = {
  ROLE_REMOVE: { count: 3, time: 10000 },
};

const roleRemovalTracker = new Map();

async function trackRoleRemoval(guild, executorId) {
  const now = Date.now();

  if (!roleRemovalTracker.has(executorId)) {
    roleRemovalTracker.set(executorId, []);
  }

  const timestamps = roleRemovalTracker.get(executorId);
  timestamps.push(now);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
  const validTimestamps = timestamps.filter(ts => now - ts < thresholds.ROLE_REMOVE.time);
  roleRemovalTracker.set(executorId, validTimestamps);

  return validTimestamps.length >= thresholds.ROLE_REMOVE.count;
}

module.exports = {
  name: 'guildMemberUpdate',
  async execute(oldMember, newMember) {
    try {
      const oldRoles = oldMember.roles.cache;
      const newRoles = newMember.roles.cache;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –£–î–ê–õ–ï–ù–ê —Ä–æ–ª—å
      const removedRoles = oldRoles.filter(role => !newRoles.has(role.id));
      if (removedRoles.size === 0) return;

      const fetchedLogs = await newMember.guild.fetchAuditLogs({
        type: AuditLogEvent.MemberRoleUpdate,
        limit: 5,
      });

      const now = Date.now();
      const entry = fetchedLogs.entries.find(e =>
        e.target.id === newMember.id &&
        now - e.createdTimestamp < 5000 &&
        e.executor &&
        e.changes.some(change => change.key === '$remove' || change.key === 'roles')
      );

      if (!entry) return;

      const executorId = entry.executor.id;
      const executor = await newMember.guild.members.fetch(executorId);

      const { isWhitelisted } = require('../utils/whitelist');
      if (executor.user.bot || isWhitelisted(executor.id, newMember.guild)) return;

      const logChannel = newMember.guild.channels.cache.get('1361137721275584528');

      // –õ–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      if (logChannel) {
        logChannel.send({
          embeds: [{
            title: 'üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏',
            description: `**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ${executor.user.tag} (${executor.id})\n**–¶–µ–ª—å:** ${newMember.user.tag} (${newMember.id})\n**–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:** ${removedRoles.map(r => r.name).join(', ')}`,
            color: 0xFFA500,
            timestamp: new Date()
          }]
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      const isMass = await trackRoleRemoval(newMember.guild, executorId);
      if (isMass) {
        // –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const rolesToRemove = executor.roles.cache.filter(role =>
          role.permissions.has(PermissionsBitField.Flags.Administrator) ||
          role.permissions.has(PermissionsBitField.Flags.ManageRoles) ||
          role.permissions.has(PermissionsBitField.Flags.ManageChannels) ||
          role.permissions.has(PermissionsBitField.Flags.BanMembers)
        );

        await executor.roles.remove(rolesToRemove);

        if (logChannel) {
          logChannel.send({
            embeds: [{
              title: 'üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π!',
              description: `**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ${executor.user.tag} (${executor.id}) –±—ã–ª –Ω–∞–∫–∞–∑–∞–Ω –∑–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`,
              color: 0xFF0000,
              timestamp: new Date()
            }]
          });
        }
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ guildMemberUpdate:', err);
    }
  }
};
